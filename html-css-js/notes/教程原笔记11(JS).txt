1. 流程控制语句

    顺序结构

    分支结构/选择结构/条件结构
        switch注意：
        1. 一般情况下不要省略break
        2. 一般情况下不要省略default

    循环结构

    代码规范：
        阅读代码时间要占到编写代码时间的10倍
        1. 运算符前后，都要加空格
        2. ;或者, 后面只需要加一个空格
        3. 代码缩进

2. 认识函数

    函数的语法：
    函数声明：（无参数无返回值）
        function 函数名(){
            函数体(具体要执行的代码);
        }
    【注】见名思意，函数名必须体现其功能

    函数调用：
        格式：函数名();

    
    函数声明：（有参数无返回值）
    形参：形式上的参数
        function 函数名(形参1,形参2 ...){
            函数体；
        }
    
    函数调用：
    格式：函数名(实参1,实参2 ...);
    实参：实际传入的参数

    传参：用实参给形参赋值

    封装函数步骤：
        1. 分析不确定值
        2. 将不确定值声明成形参
        3. 函数名和形参名都要见名思意

    程序员可能对函数运行的结果有不同的处理方式
    【注】我们不能将函数运行的结果写在函数里面

    return 关键字
    有参数有返回值的函数：
    格式： 
        function 函数名(形参1,形参2 ...){
            函数体;
            return 表达式;
        }
    【注】return后面写什么的表达式，函数调用的结果就是return后面的表达式的值
    【注】函数运行的时候，如果遇到return关键字，整个函数就会终止

3. 函数扩展知识

    argument讲解

        每个函数内部都有一个arguments，系统内置的

        arguments是用来存储实际传入的参数--实参

        属性：
            arguments.length 输出当前里面存储的参数个数
        访问某一个数据：
            arguments[下标]；
            【注】下标是从 0 开始的

        【注】优先使用形参，除非不确定实参个数

    函数作用域

        任何程序在执行的时候都要占用内存空间，函数调用的时候也要去占用内存空间

        垃圾回收机制：
            调用函数的时候，系统会分配对应的空间给这个函数使用。（空间大小一般情况由这个函数声明的变量和形参决定）
            当函数使用完毕以后，这个内存空间要释放，还给系统
        
        在函数内部声明的变量和形参属于当前函数的内存空间里的

        内存管理机制：
            在函数中声明的变量和形参，会随着函数的调用被创建，随着函数的调用结束而被销毁
            在函数中声明的变量和形参，有效范围是当前函数（当前函数的大括号），作用域，局部作用域

        就近原则：离哪个作用域近，就使用哪个作用域内的同名变量

4. 函数递归

    如果去面试，面试官问递归相关知识，则表明面试官的要求高

    但是公司明文禁止使用递归(很危险)

    递归：
        满足以下三个特点：
            1. 函数自己调用自己
            2. 一般情况下有参数
            3. 一般情况下有return

        【注】递归可以解决循环能做的所有的事情，有一些循环不容易解决的事情，递归也能轻松解决
        【注】递归，都可以写出来，但是不知道为什么是对的

    递归：
        方法：
            1. 首先去找临界值，即无需计算，获得的值
            2. 找这一次和上一次的关系
            3. 假设当前函数已经可以使用，调用自身计算上一次

5. 认识数组

    概念：
    数组指用一个变量存储一堆数据的数据结构

    数据类型：
        基本数据类型
        特殊数据类型
        引用/复合数据类型
            数组

    声明数组：
        1. 通过new创建数组
            参数：传入任意的数据，存储到数组中
            如 var arr = new Array(100, true, "hello");

        2. 省略new运算符创建数组
            如 var arr = Array(100, true, "hello");

        【注】上述两种方法，传入参数只有一个，并且是数字的时候，直接表示声明长度为该数字的数组

        3. 数组常量进行赋值（JS一般使用中括号）
            如 var arr = [100, true, "hello"];

    数组的属性：
        数组.length     返回值数组[元素]的个数

        元素：讲数组存储的每一个数据，叫做数组的元素

        访问数组的元素：
            数组[下标];     下标是从 0 开始的

    数组遍历
        for循环     for(var i = 0; i< arr.length; i++){...}
        for...in遍历 快速遍历/快速枚举（效率略快于for循环，但是没有判断有时可能出现问题）    for(var i in arr){...}

6. 数组结构

    栈结构：
        结构：从同一头进，从同一头出
        特点：先进后出

    数组的两个方法形成栈结构：
        push 
            格式：数组.push(参数1, 参数2 ...);
            功能：给数组的末尾添加元素
            返回值：插完元素以后数组的长度

        pop
            格式：数组.pop();
            参数：没有参数
            返回值：取下的元素
            功能：给数组的末尾取下一个元素

    队列结构：
        结构：从末尾进，从头部出
        特点：先进先出

    数组形成队列结构：
        push

        shift()
            格式：数组.shift();
            参数：没有参数
            功能：从数组的头部取下一个元素
            返回值：取下的元素

        unshift()
            格式：数组.unshift(参数1, 参数2 ...);
            功能：从数组的头部插入元素
            返回值：插完元素以后数组的长度

7. 数组方法

    concat()
    1. 拷贝原数组，生成新数组
    2. 合并数组
        格式：数组.concat(数组, 数组, 字符串, 其他 ...);
        返回值：合并成的新数组，原数组不会改变
        【注】就算传入的是数组，数组中元素合并时，都是要单独拆出来再进行合并的

    slice()
        格式：数组.slice(start, end);
        功能：可以基于当前数组获取指定区域元素 [start, end)，提取出元素生成新的数组
        返回值：合并成的新数组，原数组不会改变

    splice()
        格式：数组.splice(start, length, 数组1, 数组2, ...);
        参数：
            start：开始截取的位置
            length：截取的元素的长度
            第三个参数开始：在start位置，插入的元素
        返回值：截取下来的元素组成的数组

        增加：array.splice(2, 0, "hello", "world");
        删除：array.splice(1, 2);
        修改：array.splice(2, 1, "hello");(先删除再增加)

    join()
        格式：数组.join(字符串);
        功能：将数组中的元素，用传入的拼接符，拼接成一个字符串
        返回值：拼接好的字符串

    reverse()
        格式：数组.reverse();
        功能：数组逆序

    sort()
        格式：数组.sort()
        功能：数组排序
        【注】该数组排序方式默认是按字符串从小到大排序的，而不是数值大小排序
        
        改造：
            参数：一个函数，代表要怎么去进行排序（固定用法）
            arr.sort(function(value1, value2){
                return value1 - value2;
            })
